{
    // Configurations specific to Go language
    "[go]": {
        // Automatically organize imports on save
        "editor.codeActionsOnSave": {
            "source.organizeImports": true,
            "source.fixAll": false
        },
        // Automatically format code on save
        "editor.formatOnSave": true,
        // Show inline code snippets in the suggestion list
        "editor.snippetSuggestions": "inline"
    },
    // Editor settings
    "editor.formatOnSaveMode": "file",
    "editor.accessibilitySupport": "off", // Disable editor accessibility support
    "editor.bracketPairColorization.enabled": true, // Enable colorization of matching brackets
    "editor.formatOnSave": true, // Automatically format code on save
    "editor.guides.bracketPairs": true, // Highlight matching bracket pairs
    "editor.guides.bracketPairsHorizontal": true, // Show horizontal lines for matching brackets
    "editor.wordWrap": "on", // Wrap text when it exceeds the editor width
    // Explorer settings
    "explorer.compactFolders": false, // Do not compact folders in the file explorer
    "explorer.confirmDelete": false, // Do not prompt for confirmation when deleting files
    // Git settings
    "git.autofetch": true, // Automatically fetch changes from remote Git repositories
    "git.confirmSync": false, // Do not prompt for confirmation before syncing Git changes
    "gitlens.views.commits.avatars": false, // Do not show avatars in GitLens commit views
    "gitlens.views.repositories.includeWorkingTree": true, // Include the working tree in GitLens repository views
    // More Go settings
    "go.addTags": { // Automatically add tags to struct fields
        "options": "json=omitempty", // Set options for the tags
        "promptForTags": false, // Do not prompt for tags when adding them
        "tags": "json", // Default tag name to use
        "template": "", // Template for adding tags
        "transform": "snakecase" // Transform struct field names to snake_case
    },
    "go.autocompleteUnimportedPackages": true, // Suggest code completion for unimported packages
    "go.editorContextMenuCommands": { // Show commands in the editor context menu
        "addImport": true, // Add missing import statement
        "addTags": true, // Add tags to struct fields
        "benchmarkAtCursor": true, // Run benchmark tests at cursor
        "debugTestAtCursor": true, // Debug tests at cursor
        "fillStruct": true, // Fill struct with default values
        "generateTestForFile": true, // Generate tests for the current file
        "generateTestForFunction": true, // Generate tests for the current function
        "generateTestForPackage": true, // Generate tests for the current package
        "playground": true, // Open playground for selected code
        "removeTags": true, // Remove tags from struct fields
        "testAtCursor": true, // Run tests at cursor
        "testCoverage": true, // Show test coverage for the current package
        "testFile": true, // Run tests for the current file
        "testPackage": true, // Run tests for the current package
        "toggleTestFile": true // Toggle between the test file and the implementation file
    },
    "go.languageServerExperimentalFeatures": { // Experimental language server features
        "diagnostics": true // Show diagnostics for Go code
    },
    "go.lintOnSave": "package", // Lint the current package when saving
    "go.lintTool": "golangci-lint", // Set linter to "golangci-lint" (staticcheck, golint, golangci-lint, revive)
    "go.logging.level": "info", // Set logging level to info
    "go.toolsEnvVars": {
        "GO111MODULE": "on" // Enable Go module support
    },
    "go.toolsManagement.autoUpdate": true, // Automatically update Go tools
    "go.useCodeSnippetsOnFunctionSuggest": true, // Use code snippets when suggesting functions
    "go.useCodeSnippetsOnFunctionSuggestWithoutType": true, // Use code snippets when suggesting functions without types
    "go.useLanguageServer": true, // Use the Go language server
    "go.vetOnSave": "package", // Run go vet on save for the entire package
    "gopls": {
        "usePlaceholders": true, // Use placeholders in auto completion
        "ui.semanticTokens": true, // Use semantic highlighting
        "completeUnimported": true, // Automatically import unimported packages
        "ui.diagnostic.analyses": { // Run diagnostics for these analyses
            "nilness": true, // Detect possible nil values
            "shadow": true, // Detect shadowed variables
            "unusedparams": true, // Detect unused parameters
            "unusedvariable": true, // Detect unused variables
            "unusedwrite": true // Detect unused assignments
        },
        "ui.diagnostic.staticcheck": true, // Use the staticcheck analyzer
        "ui.navigation.importShortcut": "Definition" // Use "Definition" as the import shortcut
    },
    "markdown.extension.bold.indicator": "**", // Use "**" as the bold indicator for Markdown
    "markdown.extension.italic.indicator": "*", // Use "*" as the italic indicator for Markdown
    "markdown.extension.orderedList.autoRenumber": true, // Automatically renumber ordered lists in Markdown
    "markdown.extension.tableFormatter.enabled": true, // Enable table formatting for Markdown
    "markdown.math.enabled": true, // Enable LaTeX math rendering for Markdown
    // Markdown
    "markdown.preview.doubleClickToSwitchToEditor": true, // Double-click to switch from preview to editor mode
    "markdown.preview.linkify": true, // Convert URLs to clickable links in Markdown
    "markdown.preview.openMarkdownLinks": "inPreview", // Open Markdown links in the preview pane
    "markdown.updateLinksOnFileMove.enabled": "always", // Always update links when a Markdown file is moved
    "markdown.updateLinksOnFileMove.enableForDirectories": true, // Enable link updates for directories
    // Outline
    "outline.icons": true, // Show icons in the outline pane
    "outline.problems.enabled": true, // Show problem markers in the outline pane
    "outline.problems.badges": true, // Show badges for problem markers in the outline pane
    "outline.problems.colors": true, // Use colors for problem markers in the outline pane
    // Security
    "security.workspace.trust.untrustedFiles": "open", // Prompt when opening untrusted files
    // Terminal
    "terminal.integrated.defaultProfile.windows": "Command Prompt", // Use Command Prompt as the default terminal profile on Windows
    // Workbench
    // Customizations for the colors used in the workbench UI.
    "workbench.colorCustomizations": {
        "editorIndentGuide.activeBackground": "#00ff00", // Color of the active editor indentation guides
        "editorIndentGuide.background": "#ff0000", // Color of the editor indentation guides
        "tree.inactiveIndentGuidesStroke": "#00ff00", // Color of the inactive indentation guides in the explorer and open editors
        "tree.indentGuidesStroke": "#00ff00" // Color of the indentation guides in the explorer and open editors
    },
    "workbench.colorTheme": "Default Dark+", // The name of the color theme for the workbench UI
    "workbench.editor.enablePreview": false, // Whether to enable preview editors or not
    "workbench.iconTheme": "vscode-icons", // The name of the icon theme for the workbench UI
    "workbench.tree.indent": 12, // The number of pixels to indent in the explorer and open editors
    "workbench.tree.renderIndentGuides": "always" // When to render the indentation guides in the explorer and open editors
}